# -*- coding: utf-8 -*-
"""ПР4 ТИМО Саврасов ПА

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nTVRWmF_Ke8e20Igam8LT9eV4ctpyKbN
"""

from sklearn.metrics import r2_score, confusion_matrix, classification_report
from sklearn import tree
from sklearn import ensemble
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.tree import plot_tree
import sklearn.datasets as datasets

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC

import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv("wine.csv")
print(data.shape)
data.head()

trg = data.get('Cultivar')
trg.head()

unique_values = trg.value_counts()
unique_values

data_dummies = data.drop('Cultivar', axis = 1)
X_train, X_test, Y_train, Y_test = train_test_split(data_dummies, trg)

"""# Дерево"""

model_DTC = tree.DecisionTreeClassifier()
model_DTC.fit(X_train, Y_train)

preds_DTC = model_DTC.predict(X_test)

print(confusion_matrix(Y_test, preds_DTC))

print(classification_report(Y_test, preds_DTC))

print(model_DTC.get_params())

plot_tree(model_DTC)
print(tree.export_text(model_DTC))

r2_score(Y_test, preds_DTC)

model_DT_gscv = tree.DecisionTreeClassifier()
params_grid = {
    "max_depth": [2, 3, 5],
    "max_leaf_nodes": [1, 2, 5],
    "min_samples_leaf": [2, 3, 5]
    }

grid_search_DTC = GridSearchCV(estimator=model_DT_gscv,
                                  param_grid=params_grid)

grid_search_DTC.fit(np.array(X_train), np.array(Y_train))
preds_train = grid_search_DTC.best_estimator_.predict(np.array(X_test))

print(classification_report(Y_test, preds_train))

grid_search_DTC.best_params_

best_model = grid_search_DTC.best_estimator_
plot_tree(best_model)

from sklearn.metrics import f1_score
f1_score(Y_test, preds_DTC, average='weighted')

f1_score(Y_test, preds_train, average='weighted')

#plot_tree(grid_search_DTC.best_estimator_)
#print(tree.export_text(grid_search_DTC.best_estimator_))

"""# Стекинг"""

clf1 = LogisticRegression()
clf2 = KNeighborsClassifier()
clf3 = SVC()

model_STC = ensemble.StackingClassifier(estimators=[('lr', clf1), ('knn', clf2), ('svc', clf3)])
model_STC.fit(X_train, Y_train)
preds_STC = model_STC.predict(X_test)
print(confusion_matrix(Y_test, preds_STC))

f1_score(Y_test, preds_STC, average='weighted')

print(classification_report(Y_test, preds_STC))

"""# Бэггинг"""

model_RFC = ensemble.RandomForestClassifier()
model_RFC.fit(X_train, Y_train)
preds_RFC = model_RFC.predict(X_test)
print(confusion_matrix(Y_test, preds_RFC))

print(classification_report(Y_test, preds_RFC))

f1_score(Y_test, preds_RFC, average='weighted')

model_RFC.get_params()

"""# Бустинг"""

model_GBC = ensemble.GradientBoostingClassifier()
model_GBC.fit(X_train, Y_train)

preds_GBC = model_GBC.predict(X_test)
print(confusion_matrix(Y_test, preds_GBC))

f1_score(Y_test, preds_GBC, average='weighted')

print(classification_report(Y_test, preds_GBC))