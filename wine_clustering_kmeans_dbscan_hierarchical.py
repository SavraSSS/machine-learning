# -*- coding: utf-8 -*-
"""ТИМО5 Саврасов ПА

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_62gibbTlTfiWBouBbL2wHLg73ocnJem
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import plotly.express as px
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.decomposition import PCA
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv('wine.csv')
print(data.shape)
data.head()

mms = MinMaxScaler()
mm_data = pd.DataFrame(mms.fit_transform(data), columns=data.columns)
mm_data.head()

inertia = []
for k in range(1, 8):
    kmeans = KMeans(n_clusters=k, random_state=1, n_init='auto').fit(mm_data)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 8), inertia, marker='s')
plt.xlabel('Количество кластеров')
plt.ylabel('Сумма квадратов расстояний')
plt.show()

k_values = range(2, 8)
silhouette_scores = []
for k in range(2, 8):
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(mm_data)
    score = silhouette_score(mm_data, kmeans.labels_)
    silhouette_scores.append(score)
optimal_k_index = silhouette_scores.index(max(silhouette_scores))
optimal_k = k_values[optimal_k_index]
print(f"Оптимальное количество кластеров: {optimal_k}")

# Отрисовка коэффициентов силуэта
plt.plot(range(2, 8), silhouette_scores, marker='s')
plt.xlabel('Количество кластеров')
plt.ylabel('Коэффициенты силуэта')
plt.show()

pca = PCA(n_components=2)

kmeans = KMeans(n_clusters=3, random_state=123, n_init='auto').fit(mm_data)
centroids_pca = pca.fit_transform(kmeans.cluster_centers_)
pred_k = kmeans.labels_

principal_df = pd.DataFrame(data = PCA(n_components=2).fit_transform(mm_data))

#fig = plt.figure(figsize=(10, 10))
#sns.scatterplot(x = principal_df.iloc[:,0],
#                y = principal_df.iloc[:,1],
#                hue = pred_k,
#                palette="flare",
#                s=60)
#sns.scatterplot(x = centroids_pca[:,0],
#                y =  centroids_pca[:,1],
#                marker="x",
#                s=450,
#                color = 'blue')
#plt.title('PCA plot in 2D')
#plt.xlabel('PC1')
#plt.ylabel('PC2');

def PCAplot3D(x_data, y_data):
    components = PCA(n_components=3).fit_transform(x_data)

    fig = px.scatter_3d(
        components,
        x=0, y=1, z=2,
        color=y_data,
        size=0.1*np.ones(len(x_data)),
        opacity = 1,
        title='PCA plot in 3D',
        labels={'0': 'PC 1', '1': 'PC 2', '2': 'PC 3'},
        width=900, height=900
    )
    fig.show()

PCAplot3D(mm_data, pred_k)

dbscan = DBSCAN(eps=0.45, min_samples=5)
dbscan.fit(mm_data)
PCAplot3D(mm_data, dbscan.labels_)

hierarchical = AgglomerativeClustering(n_clusters=3)
hierarchical = hierarchical.fit(mm_data)
PCAplot3D(mm_data, hierarchical.labels_)

linked = linkage(mm_data, 'average')
dendrogram(linked)
plt.show()